# Put code to reverse engineer sentence here
#89 percent of women were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#89 percent of women were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#filters and counts men fatally shot
total_men_shot <- fatal_police_shootings %>% filter(gender == "M") %>% nrow()
#is there a way to put all of the weapons into one category so its armed vs unarmed instead of the individual weapons and unarmed in one column. long story short i want it to be like unarmed vs armed
# Put code to reverse engineer sentence here
#89 percent of women were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#89 percent of women were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_women_armed_with_undet= (count/total_women_shot)*100
)
#filters and counts men fatally shot
total_men_shot <- fatal_police_shootings %>% filter(gender == "M") %>% nrow()
#is there a way to put all of the weapons into one category so its armed vs unarmed instead of the individual weapons and unarmed in one column. long story short i want it to be like unarmed vs armed
#91 percent of men were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed")%>%
summarise(
count = n(),
percent_men_armed= (count/total_men_shot)*100
)
# Put code to reverse engineer sentence here
#89 percent of women were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#89 percent of women were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_women_armed_with_undet= (count/total_women_shot)*100
)
#filters and counts men fatally shot
total_men_shot <- fatal_police_shootings %>% filter(gender == "M") %>% nrow()
#91 percent of men were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed")%>%
summarise(
count = n(),
percent_men_armed= (count/total_men_shot)*100
)
#91 percent of men were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_men_armed_with_undet= (count/total_men_shot)*100
)
# Put code to reverse engineer sentence here
#89 percent of women were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#89 percent of women were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_women_armed_without_undet= (count/total_women_shot)*100
)
#filters and counts men fatally shot
total_men_shot <- fatal_police_shootings %>% filter(gender == "M") %>% nrow()
#91 percent of men were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed")%>%
summarise(
count = n(),
percent_men_armed= (count/total_men_shot)*100
)
#91 percent of men were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_men_armed_without_undet= (count/total_men_shot)*100
)
fatal_police_shootings%>%
filter(gender=="F") %>%
group_by(race)
fatal_police_shootings%>%
filter(gender=="F") %>%
group_by(race) %>%
summarise(
women_killed = n()
)
below_25k %>%
ggplot(aes(x=amount, y=forgiveness_amount))+
geom_point()
below_25k %>%
ggplot(aes(x=amount, y=forgiveness_amount))+
geom_point(size=2, shape=23)
below_25k %>%
ggplot(aes(x=amount, y=forgiveness_amount))+
geom_point(size=1)
below_25k %>%
ggplot(aes(x=amount, y=forgiveness_amount))+
geom_point(size=.25)
install.packages("sf")
geom_point(size=.25)
library(sf)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(janitor)
library(tidycensus)
library(tigris)
library(lubridate)
wv_ppp_loans<- read_rds("data/lab_11.rds")
#filter for naics codes beginning with 21 -- str detect
#columns for total number of loans per county, total loan amount per county
wv_mining_loans<- wv_ppp_loans %>%
filter(str_detect(naics_code, "^21"))
wv_mining_loans<- wv_mining_loans%>%
group_by(project_county_name) %>%
summarise(
total_loans = n(),
sum_loans = sum(amount)
)
#get wv county pop info
wv_county_population <- get_acs(geography = "county",
variables = c(population = "B01001_001"),
state = "WV",
geometry = TRUE)
#fix pop df
wv_county_population <- wv_county_population %>%
rename(COUNTY = NAME) %>%
mutate(COUNTY = toupper(str_remove_all(COUNTY,"COUNTY, WEST VIRGINIA"))) %>%
mutate(COUNTY = str_trim(COUNTY,side="both")) %>%
rename(population = estimate) %>%
select(COUNTY, population, geometry)
#join pop df with wv mining df, calculate total loan amount per 100k
mining_pop_joined<- wv_county_population %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
#get wv county plot
counties <- counties()
wv_counties <- counties %>%
filter(STATEFP == "54")
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
#TABLE
q1_table<- mining_pop_joined %>%
select(COUNTY, total_loans, sum_loans, amount_per_100k) %>%
st_drop_geometry() %>%
arrange(desc(amount_per_100k))
mine_permits <- st_read("https://tagis.dep.wv.gov/arcgis/rest/services/WVDEP_enterprise/mining_reclamation/MapServer/0/query?where=1%3D1&outFields=*&geometry=&geometryType=esriGeometryEnvelope&inSR=4326&spatialRel=esriSpatialRelIntersects&outSR=4326&f=json")
mine_permits<- mine_permits %>%
#mutate(expire_date_new = as_date(expiredate, "%y/%m/%d"))
mutate(expire_date_new = ymd(expiredate))
current_mine_permits<- mine_permits %>%
filter(expire_date_new >= as_date("2021-09-01"))
mining_pop_joined<- wv_mining_loans %>%
left_join(wv_county_population , by=c('project_county_name'='COUNTY')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
wv_counties <- counties %>%
filter(STATEFP == "54")
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
mining_pop_joined<- wv_county_population  %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
mining_pop_joined<- wv_county_population %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
View(wv_mining_loans)
#filter for naics codes beginning with 21 -- str detect
#columns for total number of loans per county, total loan amount per county
wv_mining_loans<- wv_ppp_loans %>%
filter(str_detect(naics_code, "^21"))
wv_mining_loans<- wv_mining_loans%>%
group_by(project_county_name) %>%
summarise(
total_loans = n(),
sum_loans = sum(amount)
)
#get wv county pop info
wv_county_population <- get_acs(geography = "county",
variables = c(population = "B01001_001"),
state = "WV",
geometry = TRUE)
#fix pop df
wv_county_population <- wv_county_population %>%
rename(COUNTY = NAME) %>%
mutate(COUNTY = toupper(str_remove_all(COUNTY,"COUNTY, WEST VIRGINIA"))) %>%
mutate(COUNTY = str_trim(COUNTY,side="both")) %>%
rename(population = estimate) %>%
select(COUNTY, population, geometry)
#join pop df with wv mining df, calculate total loan amount per 100k
mining_pop_joined<- wv_county_population %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
#get wv county plot
counties <- counties()
wv_counties <- counties %>%
filter(STATEFP == "54")
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
#TABLE
q1_table<- mining_pop_joined %>%
select(COUNTY, total_loans, sum_loans, amount_per_100k) %>%
st_drop_geometry() %>%
arrange(desc(amount_per_100k))
mining_pop_joined<- wv_mining_loans %>%
left_join(wv_county_population, by=c('project_county_name'='COUNTY')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
View(wv_county_population)
#fix pop df
wv_county_population <- wv_county_population %>%
rename(COUNTY = NAME) %>%
mutate(COUNTY = toupper(str_remove_all(COUNTY,"COUNTY, WEST VIRGINIA"))) %>%
mutate(COUNTY = str_trim(COUNTY,side="both")) %>%
rename(population = estimate) %>%
select(COUNTY, population, geometry)
#fix pop df
wv_county_population <- wv_county_population %>%
#rename(COUNTY = NAME) %>%
mutate(COUNTY = toupper(str_remove_all(COUNTY,"COUNTY, WEST VIRGINIA"))) %>%
mutate(COUNTY = str_trim(COUNTY,side="both")) %>%
#rename(population = estimate) %>%
select(COUNTY, population, geometry)
mining_pop_joined<- wv_county_population %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
wv_counties <- counties %>%
filter(STATEFP == "54")
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
View(current_mine_permits)
current_mine_permits%>%
ggplot() +
geom_sf() +
theme_minimal()
ggplot() +
geom_sf(data=wv_counties) +
geom_sf(data=current_mine_permits) +
theme_minimal()
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
geom_sf(data=current_mine_permits) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
View(wv_ppp_loans)
wv_ppp_loans %>%
filter(str_detect(naics_code, "^21"), project_county_name == "RITCHIE") %>%
arrange(desc(amount))
wv_ppp_loans %>%
filter(str_detect(naics_code, "^21"), project_county_name == "RITCHIE") %>%
arrange(desc(amount)) %>%
head(1)
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
library(tidyverse)
library(janitor)
library(lubridate)
library(ggrepel)
library(sf)
library(tidycensus)
library(tigris)
all_vaccines_by_zip <- read_csv("https://raw.githubusercontent.com/state-of-maryland/VaccineCSVs/master/Vax_ZIP_CODE_FirstSecondSingle_Totals_Raw.csv") %>%
clean_names() %>%
mutate(
date = today()
)
#get rid of rows that don't have fully vaxed data
all_vaccines_by_zip <- all_vaccines_by_zip %>%
filter(fully_vaccinated > 0)
#remove zips with less than 5 digits
all_vaccines_by_zip$zip_code <- as.numeric(as.character(all_vaccines_by_zip$zip_code))
cleaned_zips<- all_vaccines_by_zip [nchar(all_vaccines_by_zip$zip_code) ==5 , ]
md_zips<- cleaned_zips %>%
filter(zip_code >= 20601 & zip_code<= 21930) %>%
arrange(desc(fully_vaccinated))
top_25_md_zips<- md_zips %>%
head(25)
non_md_zips<- cleaned_zips %>%
filter(!zip_code>= 20601 | !zip_code<= 21930)%>%
arrange(desc(fully_vaccinated))
top_25_non_md_zips<- non_md_zips %>%
head(25)
print_date<- format(today())
print_date = str_replace_all(print_date, "-", "")
#print_date
md_file_name<- paste0("maryland_zips_", print_date, ".csv")
non_md_file_name<-paste0("non_maryland_zips_", print_date, ".csv")
write_csv(top_25_md_zips, md_file_name)
write_csv(top_25_non_md_zips, non_md_file_name)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tigris)
#load data
barber_shop_ppp<- read_csv("barber_shops_ppp.csv")
#df with total apps per state
barber_apps_per_state <- barber_shop_ppp %>%
group_by(state) %>%
summarise(
loans = n()
)
#df with total apps per state where disbursed is > 0
undis_barber_apps_per_state <- barber_shop_ppp %>%
filter(undisbursed_amount > 0) %>%
group_by(state) %>%
summarise(
undis_loans = n()
)
#join and rename columns
# American samoa and Guam have 0 undis loans
barber_apps_joined<- barber_apps_per_state %>%
left_join(undis_barber_apps_per_state) %>%
mutate(
total_loans = loans,
total_undisbursed_loans = undis_loans
) %>%
select(state, total_loans, total_undisbursed_loans)
top_ten_undisbursed<- barber_apps_joined %>%
arrange(desc(total_undisbursed_loans))%>%
head(10)
#export top 10 using write_csv
write_csv(top_ten_undisbursed, "top_ten_states_undisbursed_loans.csv")
#make bar chart in datawrapper
setwd("~/Documents/GitHub/data-viz/barber-shop-data")
#load data
barber_shop_ppp<- read_csv("barber_shops_ppp.csv")
#df with total apps per state
barber_apps_per_state <- barber_shop_ppp %>%
group_by(state) %>%
summarise(
loans = n()
)
#df with total apps per state where disbursed is > 0
undis_barber_apps_per_state <- barber_shop_ppp %>%
filter(undisbursed_amount > 0) %>%
group_by(state) %>%
summarise(
undis_loans = n()
)
#join and rename columns
# American samoa and Guam have 0 undis loans
barber_apps_joined<- barber_apps_per_state %>%
left_join(undis_barber_apps_per_state) %>%
mutate(
total_loans = loans,
total_undisbursed_loans = undis_loans
) %>%
select(state, total_loans, total_undisbursed_loans)
top_ten_undisbursed<- barber_apps_joined %>%
arrange(desc(total_undisbursed_loans))%>%
head(10)
#export top 10 using write_csv
write_csv(top_ten_undisbursed, "top_ten_states_undisbursed_loans.csv")
#make bar chart in datawrapper
#find percentages of undisbursed loans for top ten states
barber_apps_percent_undis<- barber_apps_joined %>%
mutate(
percent_undisbursed = (total_undisbursed_loans/total_loans)*100
) %>%
arrange(desc(percent_undisbursed)) %>%
head(10)
write_csv(barber_apps_percent_undis, "barber_apps_percent_undisbursed.csv")
setwd("~/Documents/GitHub/data-viz/kabbage-counties-data")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tigris)
#load
kabbage_counties<- read_csv("kabbage_counties.csv")
all_counties<- read_csv("all_counties.csv")
#join, calc percent
kabbage_counties_joined<- all_counties %>%
left_join(kabbage_counties, by=c('project_county_name'='project_county_name','project_state'='project_state')) %>%
rename(
kabbage_loans = total.y,
all_loans = total.x
) %>%
mutate(
percent_kabbage = (kabbage_loans/all_loans)*100
)
#read in county fips
county_fips<- read_csv("county_fips.csv")
#join with prev df, get rid of zeros
kabbage_counties_fips <- kabbage_counties_joined %>%
left_join(county_fips, by=c('project_county_name'='match_county','project_state'='state')) %>%
mutate(kabbage_loans = case_when(
is.na(kabbage_loans) ~ 0,
TRUE ~ kabbage_loans
)) %>%
mutate( percent_kabbage = case_when(
is.na( percent_kabbage) ~ 0,
TRUE ~  percent_kabbage
))
#export csv
write_csv(kabbage_counties_fips, "kabbage_counties_fips.csv")
knitr::opts_chunk$set(echo = TRUE)
#~/Documents/GitHub/data_journalism_2021_fall/labs/lab_09/
wv_ppp_loans<- read_rds("~/Documents/GitHub/data-viz/gg-plot/lab_09.rds")
wv_loans_approved_april <- wv_ppp_loans %>%
filter(stringr::str_detect(date_approved, '2020-04')) %>%
group_by(date_approved) %>%
summarise(
total_loans=n()
)
wv_loans_approved_april %>%
ggplot() +
geom_line(aes(x=date_approved, y=total_loans))+
scale_x_date(date_breaks = "1 day")+
theme(
axis.text.x = element_text(angle = 45,  hjust=1)
)+
labs(
title="Loans Approved by Date in April 2020",
x = "Date Approved",
y = "Total Loans",
caption = "Source: SBA PPP loan database"
) +
geom_point(aes(x=date_approved, y=total_loans))+
geom_text(aes(x=date_approved, y=total_loans, label=total_loans))
total_loans_by_state<- read_csv("state_ppp_all.csv")
#rename N and S Dakota to properly join
total_loans_by_state<- total_loans_by_state %>%
mutate(state = case_when(
state == "N Dakota" ~ "North Dakota",
state == "S Dakota" ~ "South Dakota",
#this "replaces" existing data that's spelled correctly with itself
TRUE ~ state
))
library(tidycensus)
acs_2019 <- load_variables(2019, "acs5")
#variable name B01001_001
#df with state name and pop from ACS
state_population<- get_acs(geography = "state",
variables = c(state_pop = "B01001_001"),
year = 2019) %>%
mutate(state_pop = estimate, state = NAME) %>%
select(state, state_pop)
#join and find per 100k
states_pop_loans <- state_population %>%
right_join(total_loans_by_state) %>%
mutate(
per_100k = (total_ppp_loans/state_pop)*100000
)%>%
arrange(desc(per_100k)) %>%
head(10)
#states_pop_loans
states_pop_loans %>%
ggplot() +
geom_bar(aes(x=reorder(state,per_100k), weight=per_100k), fill="blue")+
theme(
axis.text.x = element_text(angle = 45,  hjust=1))+
labs(
title="States with Highest PPP Loan Approval per 100,000 People",
x = "State",
y = "Loans Approved (per 100,000)",
caption = "Source: SBA PPP loan database and Census ACS Data"
)
below_25k<- wv_ppp_loans %>%
filter(amount <= 25000) %>%
mutate(forgiveness_amount = case_when(
is.na(forgiveness_amount) ~ 0,
TRUE ~ forgiveness_amount
))
below_25k %>%
ggplot(aes(x=amount, y=forgiveness_amount))+
geom_point(size=1)
#Derek's note: it's best practice to put the aes() on the most granular level of the graph, so in this case that would be: ggplot() + geom_point(aes(x=amount,y=forgiveness_amount)) Your way works, but if you're doing a more complicated graph that has multiple elements you want to make sure that you've got the aesthetics on the proper geometric object.
