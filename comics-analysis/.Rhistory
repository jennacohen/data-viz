ggplot() +
geom_bar(aes(x=reorder(state,per_100k), weight=per_100k,), fill="blue")+
+
theme(
axis.text.x = element_text(angle = 45,  hjust=1))+
labs(
title="States with Highest PPP Loan Approval per 100,000 People",
x = "State",
y = "Loans Approved (per 100,000)",
caption = "Source: SBA PPP loan database and Census ACS Data"
)
states_pop_loans %>%
ggplot() +
geom_bar(aes(x=reorder(state,per_100k), weight=per_100k,), fill="blue")+
theme(
axis.text.x = element_text(angle = 45,  hjust=1))+
labs(
title="States with Highest PPP Loan Approval per 100,000 People",
x = "State",
y = "Loans Approved (per 100,000)",
caption = "Source: SBA PPP loan database and Census ACS Data"
)
is.na(2)
is.na(NA)
below_25k<- wv_ppp_loans %>%
filter(amount <= 25000) %>%
mutate(forgiveness_amount = case_when(
is.na(forgiveness_amount) ~ 0,
TRUE ~ forgiveness_amount
))
View(below_25k)
knitr::opts_chunk$set(echo = TRUE)
# Put code to reverse engineer sentence here
#89 percent of women were armed
fatal_police_shootings%>%
filter(gender=="F")%>%
group_by(armed)%>%
summarise(count = n())
#is there a way to put all of the weapons into one category so its armed vs unarmed instead of the individual weapons and unarmed in one column. long story short i want it to be like unarmed vs armed
# Put code to reverse engineer sentence here
#89 percent of women were armed
fatal_police_shootings%>%
filter(gender=="F", armed != "unarmed")%>%
#group_by(armed)%>%
summarise(count = n())
# Put code to reverse engineer sentence here
#89 percent of women were armed
fatal_police_shootings%>%
filter(gender=="F", armed != "unarmed")%>%
#group_by(armed)%>%
summarise(
count = n(),
(count/total_women_shot)*100
)
# Put code to reverse engineer sentence here
#89 percent of women were armed
fatal_police_shootings%>%
filter(gender=="F", armed != "unarmed")%>%
#group_by(armed)%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
# Put code to reverse engineer sentence here
#89 percent of women were armed
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed")%>%
#group_by(armed)%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#89 percent of women were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
# Put code to reverse engineer sentence here
#89 percent of women were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#89 percent of women were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#filters and counts men fatally shot
total_men_shot <- fatal_police_shootings %>% filter(gender == "M") %>% nrow()
#is there a way to put all of the weapons into one category so its armed vs unarmed instead of the individual weapons and unarmed in one column. long story short i want it to be like unarmed vs armed
# Put code to reverse engineer sentence here
#89 percent of women were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#89 percent of women were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_women_armed_with_undet= (count/total_women_shot)*100
)
#filters and counts men fatally shot
total_men_shot <- fatal_police_shootings %>% filter(gender == "M") %>% nrow()
#is there a way to put all of the weapons into one category so its armed vs unarmed instead of the individual weapons and unarmed in one column. long story short i want it to be like unarmed vs armed
#91 percent of men were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed")%>%
summarise(
count = n(),
percent_men_armed= (count/total_men_shot)*100
)
# Put code to reverse engineer sentence here
#89 percent of women were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#89 percent of women were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_women_armed_with_undet= (count/total_women_shot)*100
)
#filters and counts men fatally shot
total_men_shot <- fatal_police_shootings %>% filter(gender == "M") %>% nrow()
#91 percent of men were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed")%>%
summarise(
count = n(),
percent_men_armed= (count/total_men_shot)*100
)
#91 percent of men were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_men_armed_with_undet= (count/total_men_shot)*100
)
# Put code to reverse engineer sentence here
#89 percent of women were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed")%>%
summarise(
count = n(),
percent_women_armed= (count/total_women_shot)*100
)
#89 percent of women were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="F" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_women_armed_without_undet= (count/total_women_shot)*100
)
#filters and counts men fatally shot
total_men_shot <- fatal_police_shootings %>% filter(gender == "M") %>% nrow()
#91 percent of men were armed (with undetermined considered armed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed")%>%
summarise(
count = n(),
percent_men_armed= (count/total_men_shot)*100
)
#91 percent of men were armed (with undetermined considered unarmed)
fatal_police_shootings%>%
filter(gender=="M" & armed != "unarmed" & armed != "undetermined")%>%
summarise(
count = n(),
percent_men_armed_without_undet= (count/total_men_shot)*100
)
fatal_police_shootings%>%
filter(gender=="F") %>%
group_by(race)
fatal_police_shootings%>%
filter(gender=="F") %>%
group_by(race) %>%
summarise(
women_killed = n()
)
below_25k %>%
ggplot(aes(x=amount, y=forgiveness_amount))+
geom_point()
below_25k %>%
ggplot(aes(x=amount, y=forgiveness_amount))+
geom_point(size=2, shape=23)
below_25k %>%
ggplot(aes(x=amount, y=forgiveness_amount))+
geom_point(size=1)
below_25k %>%
ggplot(aes(x=amount, y=forgiveness_amount))+
geom_point(size=.25)
install.packages("sf")
geom_point(size=.25)
library(sf)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(janitor)
library(tidycensus)
library(tigris)
library(lubridate)
wv_ppp_loans<- read_rds("data/lab_11.rds")
#filter for naics codes beginning with 21 -- str detect
#columns for total number of loans per county, total loan amount per county
wv_mining_loans<- wv_ppp_loans %>%
filter(str_detect(naics_code, "^21"))
wv_mining_loans<- wv_mining_loans%>%
group_by(project_county_name) %>%
summarise(
total_loans = n(),
sum_loans = sum(amount)
)
#get wv county pop info
wv_county_population <- get_acs(geography = "county",
variables = c(population = "B01001_001"),
state = "WV",
geometry = TRUE)
#fix pop df
wv_county_population <- wv_county_population %>%
rename(COUNTY = NAME) %>%
mutate(COUNTY = toupper(str_remove_all(COUNTY,"COUNTY, WEST VIRGINIA"))) %>%
mutate(COUNTY = str_trim(COUNTY,side="both")) %>%
rename(population = estimate) %>%
select(COUNTY, population, geometry)
#join pop df with wv mining df, calculate total loan amount per 100k
mining_pop_joined<- wv_county_population %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
#get wv county plot
counties <- counties()
wv_counties <- counties %>%
filter(STATEFP == "54")
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
#TABLE
q1_table<- mining_pop_joined %>%
select(COUNTY, total_loans, sum_loans, amount_per_100k) %>%
st_drop_geometry() %>%
arrange(desc(amount_per_100k))
mine_permits <- st_read("https://tagis.dep.wv.gov/arcgis/rest/services/WVDEP_enterprise/mining_reclamation/MapServer/0/query?where=1%3D1&outFields=*&geometry=&geometryType=esriGeometryEnvelope&inSR=4326&spatialRel=esriSpatialRelIntersects&outSR=4326&f=json")
mine_permits<- mine_permits %>%
#mutate(expire_date_new = as_date(expiredate, "%y/%m/%d"))
mutate(expire_date_new = ymd(expiredate))
current_mine_permits<- mine_permits %>%
filter(expire_date_new >= as_date("2021-09-01"))
mining_pop_joined<- wv_mining_loans %>%
left_join(wv_county_population , by=c('project_county_name'='COUNTY')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
wv_counties <- counties %>%
filter(STATEFP == "54")
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
mining_pop_joined<- wv_county_population  %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
mining_pop_joined<- wv_county_population %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
View(wv_mining_loans)
#filter for naics codes beginning with 21 -- str detect
#columns for total number of loans per county, total loan amount per county
wv_mining_loans<- wv_ppp_loans %>%
filter(str_detect(naics_code, "^21"))
wv_mining_loans<- wv_mining_loans%>%
group_by(project_county_name) %>%
summarise(
total_loans = n(),
sum_loans = sum(amount)
)
#get wv county pop info
wv_county_population <- get_acs(geography = "county",
variables = c(population = "B01001_001"),
state = "WV",
geometry = TRUE)
#fix pop df
wv_county_population <- wv_county_population %>%
rename(COUNTY = NAME) %>%
mutate(COUNTY = toupper(str_remove_all(COUNTY,"COUNTY, WEST VIRGINIA"))) %>%
mutate(COUNTY = str_trim(COUNTY,side="both")) %>%
rename(population = estimate) %>%
select(COUNTY, population, geometry)
#join pop df with wv mining df, calculate total loan amount per 100k
mining_pop_joined<- wv_county_population %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
#get wv county plot
counties <- counties()
wv_counties <- counties %>%
filter(STATEFP == "54")
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
#TABLE
q1_table<- mining_pop_joined %>%
select(COUNTY, total_loans, sum_loans, amount_per_100k) %>%
st_drop_geometry() %>%
arrange(desc(amount_per_100k))
mining_pop_joined<- wv_mining_loans %>%
left_join(wv_county_population, by=c('project_county_name'='COUNTY')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
View(wv_county_population)
#fix pop df
wv_county_population <- wv_county_population %>%
rename(COUNTY = NAME) %>%
mutate(COUNTY = toupper(str_remove_all(COUNTY,"COUNTY, WEST VIRGINIA"))) %>%
mutate(COUNTY = str_trim(COUNTY,side="both")) %>%
rename(population = estimate) %>%
select(COUNTY, population, geometry)
#fix pop df
wv_county_population <- wv_county_population %>%
#rename(COUNTY = NAME) %>%
mutate(COUNTY = toupper(str_remove_all(COUNTY,"COUNTY, WEST VIRGINIA"))) %>%
mutate(COUNTY = str_trim(COUNTY,side="both")) %>%
#rename(population = estimate) %>%
select(COUNTY, population, geometry)
mining_pop_joined<- wv_county_population %>%
left_join(wv_mining_loans, by=c('COUNTY'='project_county_name')) %>%
mutate(amount_per_100k = sum_loans/population*100000) %>%
arrange(desc(amount_per_100k))
wv_counties <- counties %>%
filter(STATEFP == "54")
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
View(current_mine_permits)
current_mine_permits%>%
ggplot() +
geom_sf() +
theme_minimal()
ggplot() +
geom_sf(data=wv_counties) +
geom_sf(data=current_mine_permits) +
theme_minimal()
#MAP
ggplot() +
geom_sf(data=mining_pop_joined, aes(fill=amount_per_100k)) +
geom_sf(data=current_mine_permits) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
View(wv_ppp_loans)
wv_ppp_loans %>%
filter(str_detect(naics_code, "^21"), project_county_name == "RITCHIE") %>%
arrange(desc(amount))
wv_ppp_loans %>%
filter(str_detect(naics_code, "^21"), project_county_name == "RITCHIE") %>%
arrange(desc(amount)) %>%
head(1)
knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
library(tidyverse)
library(janitor)
library(lubridate)
library(ggrepel)
library(sf)
library(tidycensus)
library(tigris)
all_vaccines_by_zip <- read_csv("https://raw.githubusercontent.com/state-of-maryland/VaccineCSVs/master/Vax_ZIP_CODE_FirstSecondSingle_Totals_Raw.csv") %>%
clean_names() %>%
mutate(
date = today()
)
#get rid of rows that don't have fully vaxed data
all_vaccines_by_zip <- all_vaccines_by_zip %>%
filter(fully_vaccinated > 0)
#remove zips with less than 5 digits
all_vaccines_by_zip$zip_code <- as.numeric(as.character(all_vaccines_by_zip$zip_code))
cleaned_zips<- all_vaccines_by_zip [nchar(all_vaccines_by_zip$zip_code) ==5 , ]
md_zips<- cleaned_zips %>%
filter(zip_code >= 20601 & zip_code<= 21930) %>%
arrange(desc(fully_vaccinated))
top_25_md_zips<- md_zips %>%
head(25)
non_md_zips<- cleaned_zips %>%
filter(!zip_code>= 20601 | !zip_code<= 21930)%>%
arrange(desc(fully_vaccinated))
top_25_non_md_zips<- non_md_zips %>%
head(25)
print_date<- format(today())
print_date = str_replace_all(print_date, "-", "")
#print_date
md_file_name<- paste0("maryland_zips_", print_date, ".csv")
non_md_file_name<-paste0("non_maryland_zips_", print_date, ".csv")
write_csv(top_25_md_zips, md_file_name)
write_csv(top_25_non_md_zips, non_md_file_name)
#turn off scientific notation
options(scipen=999)
#load tidyverse
library(tidyverse)
#load janitor - clean set names
library(janitor)
#load lubridate - not sure if we'll need
library(lubridate)
#load refinr - not sure if we'll need
library(refinr)
#we'll add to these as we need other libs
dc<- read_csv("data/dc_comic_data.csv")
setwd("~/Documents/GitHub/data-viz/comics-analysis")
dc<- read_csv("dc_comic_data.csv")
marvel<- read_csv("marvel_comic_data.csv")
#Get rid of Na's in gsm column so it's easier to filter - Jenna
dc<- dc %>%
#mutate(
#type = "comic",
#publisher = "dc"
#)
select(-page_id, -urlslug) %>%
clean_names() %>%
mutate(gsm = case_when(
is.na(gsm) ~ "none",
TRUE ~ gsm
))
marvel<- marvel %>%
#mutate(
#type = "comic",
#publisher = "marvel"
#)
select(-page_id, -urlslug) %>%
clean_names()%>%
mutate(gsm = case_when(
is.na(gsm) ~ "none",
TRUE ~ gsm
))
#Should probably mutate to add a column in each that says DC or marvel - then join? -Jenna
#tried this and it created a list of 112 million rows??? was expecting 22k -jenna
#master_list <- marvel %>%
#left_join(dc, by=c('type'))
#this isn't working either !!! -jenna
#joined <- rbind(marvel, dc)
#end result: count of total GSM & count of majority characters
#for each data set, filter for GSM, count & reverse filter for GSM, count
#also calculate the percentage, dig deeper to see different GSM breakdowns if we were to deem it newsworthy
#gsm characters
marvel_gsm<- marvel %>%
filter(gsm != "none")
marvel_gsm_breakdown<- marvel_gsm %>%
group_by(gsm) %>%
summarise(
gsm_count = n()
)
#non_gsm characters
marvel_non_gsm<- marvel %>%
filter(gsm == "none")
marvel_non_gsm_breakdown<- marvel_non_gsm %>%
group_by(gsm) %>%
summarise(
gsm_count = n()
)
#total marvel characters for percentage purposes
marvel_characters<- marvel %>% nrow()
marvel_breakdown<- bind_rows(marvel_gsm_breakdown, marvel_non_gsm_breakdown) %>%
mutate(
percent_in_universe = (gsm_count/marvel_characters)*100
)
write_csv(marvel_breakdown, "marvel_breakdown.csv")
#marvel_gsm_count<- marvel_gsm %>% nrow()
#marvel_non_gsm_count<- marvel_non_gsm %>% nrow()
#gsm characters
dc_gsm<- dc %>%
filter(gsm != "none")
dc_gsm_breakdown<- dc_gsm %>%
group_by(gsm) %>%
summarise(
gsm_count = n()
)
#non_gsm characters
dc_non_gsm<- dc %>%
filter(gsm == "none")
dc_non_gsm_breakdown<- dc_non_gsm %>%
group_by(gsm) %>%
summarise(
gsm_count = n()
)
#total marvel characters for percentage purposes
dc_characters<- dc %>% nrow()
dc_breakdown<- bind_rows(dc_gsm_breakdown, dc_non_gsm_breakdown) %>%
mutate(
percent_in_universe = (gsm_count/dc_characters)*100
)
write_csv(dc_breakdown, "dc_breakdown.csv")
#marvel_gsm_count<- marvel_gsm %>% nrow()
#marvel_non_gsm_count<- marvel_non_gsm %>% nrow()
